#!/bin/sh

# Uncomment line below to enable logging
SCALEIO_DEBUG="1"

# Set KUBECONFIG to point to desired config file; ensure specified config file exists on all nodes
KUBECONFIG="/root/.kube/config"

# Script that returns a token to be used for labeling
TOKEN_SCRIPT="/opt/emc/scaleio/flexvol/get-token.sh"

# full path to the logfile
LOGFILE="/var/log/scaleio-flexvol.log"

# stderr
err() {
	debug $*
	shift
	printf "%b" "$*" 1>&2
}

# stdout
log() {
	debug $*
	shift
	printf "%b" "$*" >&1
}

# log to file (if debug)
debug() {
	if [ "$SCALEIO_DEBUG" = "1" ]; then
		logtofile $*
	fi
}

# log to file
logtofile() {
	function=$1
	shift
	printf "%s pid=%s func=%s msg=\"%s\"\n" "$(date +"%Y-%m-%d %H:%M:%S")" "$$" "${function}" "$*" >> ${LOGFILE}
}

success() {
	log $1 '{"status": "Success"}'
	exit 0
}

usage() {
	err $FUNCNAME "error: invalid usage\n"
	err $FUNCNAME "\t$0 init\n"
	err $FUNCNAME "\t$0 attach <json params> <nodename>\n"
	err $FUNCNAME "\t$0 detach <mount device> <nodename>\n"
	err $FUNCNAME "\t$0 waitforattach <mount device> <json params>\n"
	err $FUNCNAME "\t$0 mountdevice <mount dir> <mount device> <json params>\n"
	err $FUNCNAME "\t$0 unmountdevice <mount dir>\n"
	err $FUNCNAME "\t$0 isattached <json params> <nodename>\n"

	exit 1
}

ismounted() {
	MOUNT=$(findmnt -n "${MNTPATH}" 2>/dev/null | cut -d' ' -f1)
	if [ "${MOUNT}" = "${MNTPATH}" ]; then echo 1; else echo 0; fi
}

# Requires $JSON_PARAMS to be set
# Sets $VOLUMEID
volidfromjson() {
	VOLUMEID=$(echo "${JSON_PARAMS}" | grep -Po '"volumeID":".*"?[^\\]"' | cut -d: -f 2 | cut -d\" -f 2)
	if [ -z "${VOLUMEID}" ] || [ "${VOLUMEID}" = null ]; then
		err $FUNCNAME "{\"status\": \"Failure\", \"message\": \"Unable to extract volumeID\"}"
		exit 1
	fi
}

getvolumename() {
	JSON_PARAMS=$1
	VOLUMEID=$(echo "${JSON_PARAMS}" | grep -Po '"volumeID":".*"?[^\\]"' | cut -d: -f 2 | cut -d\" -f 2)
	if [ -z "${VOLUMEID}" ] || [ "${VOLUMEID}" = null ]; then
		err $FUNCNAME "{\"status\": \"Failure\", \"message\": \"Unable to extract volumeID\"}"
		exit 1
	fi
	log $FUNCNAME "{\"status\": \"Success\", \"volumeName\": \"${VOLUMEID}\"}"
	exit 0
}

attach() {
	JSON_PARAMS=$1
	NODE_NAME=$2
	volidfromjson

	if [ -z "$VOLUMEID" ]; then
		err $FUNCNAME '{"status": "Failure", "message": "Unable to extract volumeID"}'
		exit 1
	fi

	VOLUME_ATTACHED=$(oc --config=${KUBECONFIG} --token=${TOKEN} get pv ${VOLUMEID} --template='{{.metadata.labels.attached}}')
	VOLUME_ATTACHED_NODE=$(oc --config=${KUBECONFIG} --token=${TOKEN} get pv ${VOLUMEID} --template='{{.metadata.labels.attachedNode}}')
	debug $FUNCNAME "attached:" "${VOLUME_ATTACHED}"
	debug $FUNCNAME "attachedNode:" "${VOLUME_ATTACHED_NODE}"

	if [ -z "${VOLUME_ATTACHED}" ]; then
		VOLUME_ATTACHED="false"
	fi
	if [ "${VOLUME_ATTACHED}" == "true" ]; then
		if [ "${VOLUME_ATTACHED_NODE}" == "${NODE_NAME}" ]; then
			log $FUNCNAME "{\"status\": \"Success\", \"device\":\"${VOLUMEID}\"}"
			exit 0
		fi
		err $FUNCNAME "{\"status\": \"Failure\", \"message\": \"Volume is in use by another pod\"}"
		exit 1
	fi

	SET_LABEL_ATTACHED=$(oc --config=${KUBECONFIG} --token=${TOKEN} label pv ${VOLUMEID} --overwrite attached=true)
	SET_LABEL_ATTACHED_NODE=$(oc --config=${KUBECONFIG} --token=${TOKEN} label pv ${VOLUMEID} --overwrite attachedNode=${NODE_NAME})
	debug $FUNCNAME "set_label_attached:" "${SET_LABEL_ATTACHED}"
	debug $FUNCNAME "set_label_attachedNode:" "${SET_LABEL_ATTACHED_NODE}"

	log $FUNCNAME "{\"status\": \"Success\", \"device\":\"${VOLUMEID}\"}"
	exit 0
}

detach() {
	VOLUMEID=$1
	NODE_NAME=$2

	SET_LABEL_ATTACHED=$(oc --config=${KUBECONFIG} --token=${TOKEN} label pv ${VOLUMEID} --overwrite attached=false)
	SET_LABEL_ATTACHED_NODE=$(oc --config=${KUBECONFIG} --token=${TOKEN} label pv ${VOLUMEID} --overwrite attachedNode-)
	debug $FUNCNAME "set_label_attached:" "${SET_LABEL_ATTACHED}"
	debug $FUNCNAME "set_label_attachedNode:" "${SET_LABEL_ATTACHED_NODE}"

	success $FUNCNAME
}

mountdevice() {
	MNTPATH=$1
	DEV=$2
	FSTYPE=$(echo "$3" | grep -Po '"kubernetes.io/fsType":".*"?[^\\]"' | cut -d: -f 2 | cut -d\" -f 2)

	if [ ! -b "${DEV}" ]; then
		err $FUNCNAME "{\"status\": \"Failure\", \"message\": \"${DEV} does not exist\"}"
		exit 1
	fi

	if [ "$(ismounted)" -eq "1" ] ; then
		success $FUNCNAME
	fi

	VOLFSTYPE=$(blkid -o udev "${DEV}" 2>/dev/null | grep "ID_FS_TYPE"| cut -d"=" -f2)
	if [ "${VOLFSTYPE}" = "" ]; then
		CMD="mkfs -t ${FSTYPE}"
		if [ "$FSTYPE" = "ext4" ]; then
			CMD="${CMD} -F"
		elif [ "$FSTYPE" = "xfs" ]; then
			CMD="${CMD} -f"
		fi
		if ! ${CMD} "${DEV}" > /dev/null 2>&1; then
			err $FUNCNAME "{\"status\": \"Failure\", \"message\": \"Failed to create fs ${FSTYPE} on device ${DEV}\"}"
			exit 1
		fi
	fi

	mkdir -p "${MNTPATH}" > /dev/null 2>&1
	SELINUX_STATUS=$(sestatus |grep 'SELinux status' | grep disabled)
	SELINUX_ENABLED=$(echo $?)
	if ! mount --make-shared "${DEV}" "${MNTPATH}" > /dev/null 2>&1; then
		debug $FUNCNAME "Failed to mount device ${DEV} at ${MNTPATH}"
		err $FUNCNAME "{\"status\": \"Failure\", \"message\": \"Failed to mount device ${DEV} at ${MNTPATH}\"}"
		exit 1
	fi
	if [ "${SELINUX_ENABLED}" = "1" ]; then
		if ! chcon -t svirt_sandbox_file_t "${MNTPATH}" > /dev/null 2>&1; then
			debug $FUNCNAME "Failed to modify SELINUX properties for ${MNTPATH}"
			err $FUNCNAME "{\"status\": \"Failure\", \"message\": \"Failed to modify SELINUX properties for ${MNTPATH}\"}"
			exit 1
		fi
	fi
	success $FUNCNAME
}

unmountdevice() {
	MNTPATH=$1
	if [ "$(ismounted)" -eq "0" ] ; then success $FUNCNAME; fi
	if ! umount "${MNTPATH}" > /dev/null 2>&1; then
		err $FUNCNAME "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
		exit 1
	fi
	sleep 2
	VOLUMEID=${MNTPATH##*/}
	success $FUNCNAME
}

isattached() {
	JSON_PARAMS=$1
	NODE_NAME=$2
	volidfromjson

	VOLUME_ATTACHED=$(oc --config=${KUBECONFIG} --token=${TOKEN} get pv ${VOLUMEID} --template='{{.metadata.labels.attached}}')
	VOLUME_ATTACHED_NODE=$(oc --config=${KUBECONFIG} --token=${TOKEN} get pv ${VOLUMEID} --template='{{.metadata.labels.attachedNode}}')
	debug $FUNCNAME "attached:" "${VOLUME_ATTACHED}"
	debug $FUNCNAME "attachedNode:" "${VOLUME_ATTACHED_NODE}"

	if [ "${VOLUME_ATTACHED}" = "true" ]; then
		if [ "${VOLUME_ATTACHED_NODE}" = "${NODE_NAME}" ]; then
			log $FUNCNAME "{\"status\": \"Success\", \"attached\":true}"
			exit 0
		fi
	fi
	log $FUNCNAME "{\"status\": \"Success\", \"attached\":false}"
	exit 0
}

waitforattach() {
	EXPECTED_DEV=$1
	JSON_PARAMS=$2
	volidfromjson

	DEV="/dev/disk/by-id/$(ls -1 /dev/disk/by-id | grep "\-${VOLUMEID}$")"

	if [ -z "$DEV" ]; then
		debug $FUNCNAME "${VOLUMEID}" "not found or mapped"
		err $FUNCNAME "{\"status\": \"Failure\", \"message\": \"Volume not attached\"}"
		exit 1
	fi

	log $FUNCNAME "{\"status\": \"Success\", \"device\":\"${DEV}\"}"
	exit 0
}

op=$1

if [ "$op" = "init" ]; then
	log "main" "{\"status\":\"Success\",\"capabilities\":{\"attach\":true}}"
	exit 0
fi
if [ "$#" -lt "2" ]; then usage; fi

shift

debug "main" "$op" "$*"

TOKEN="$(${TOKEN_SCRIPT})"

case "$op" in
	attach)
		attach "$@"
		;;
	detach)
		detach "$@"
		;;
	waitforattach)
		waitforattach "$@"
		;;
	mountdevice)
		mountdevice "$@"
		;;
	unmountdevice)
		unmountdevice "$@"
		;;
	isattached)
		isattached "$@"
		;;
	getvolumename)
		getvolumename "$@"
		;;
	*)
		err "main" "{\"status\": \"Not supported\"}"
		exit 1
esac

exit 1
